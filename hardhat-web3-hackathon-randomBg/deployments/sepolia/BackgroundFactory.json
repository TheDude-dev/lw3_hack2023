{
  "address": "0x27C9b39B79C5Fd8B0Aae7EDbeE8e408288e522cE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BackgroundFactory__NotOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "backgroundFactoryState",
          "type": "uint256"
        }
      ],
      "name": "BackgroundFactory__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dnapicked",
          "type": "uint256"
        }
      ],
      "name": "DnaPicked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "backgroundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dna",
          "type": "uint256"
        }
      ],
      "name": "NewBackground",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRandomDna",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "createRandomBackground",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBackgroundFactoryState",
      "outputs": [
        {
          "internalType": "enum BackgroundFactory.BackgroundFactoryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfBackgrounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumwords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentRandomBackground",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_backgrounds",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "dna",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2db76f5eb500e8bec1bdfc4becbf44eb67afb943913acd6325f4372158b0ff5",
  "receipt": {
    "to": null,
    "from": "0x8003d30E34B636c5E9FD97AB9b93233c6eC6Af92",
    "contractAddress": "0x27C9b39B79C5Fd8B0Aae7EDbeE8e408288e522cE",
    "transactionIndex": 96,
    "gasUsed": "1254406",
    "logsBloom": "0x
    "blockHash": "0xfb37807537472509f85d85d9a75ddaf4b86a4fac6a3eba663b154963526925ff",
    "transactionHash": "0xb2db76f5eb500e8bec1bdfc4becbf44eb67afb943913acd6325f4372158b0ff5",
    "logs": [],
    "blockNumber": 4368343,
    "cumulativeGasUsed": "23547174",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "5508",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "5694070ec0f0591494f419fa24ec9a9a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BackgroundFactory__NotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"backgroundFactoryState\",\"type\":\"uint256\"}],\"name\":\"BackgroundFactory__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dnapicked\",\"type\":\"uint256\"}],\"name\":\"DnaPicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"backgroundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dna\",\"type\":\"uint256\"}],\"name\":\"NewBackground\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomDna\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createRandomBackground\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBackgroundFactoryState\",\"outputs\":[{\"internalType\":\"enum BackgroundFactory.BackgroundFactoryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfBackgrounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumwords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentRandomBackground\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_backgrounds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dna\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink keeper nodes call they look for the `upkeepNeeded` to return true. The following should be true in order to return true: 1. Our time interval should have passed 2. Our subscription is funded with LINK 3. The Factory should be in an \\\"open\\\" state.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/BackgroundFactory.sol\":\"BackgroundFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/test/BackgroundFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\n/*\\n * @title A Random BackgroundFactory\\n * @author Bonheur Balek's AKA The Dude\\n * @notice This contract is for creating an untamperable random background generator for our web2 Game\\n * @dev This implements Chainlink VRF v2 and Chainlink Keepers\\n */\\n\\nerror BackgroundFactory__NotOpen();\\nerror BackgroundFactory__UpkeepNotNeeded(uint256 backgroundFactoryState);\\n\\ncontract BackgroundFactory is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /* Types */\\n    enum BackgroundFactoryState {\\n        OPEN,\\n        CREATING\\n    }\\n    struct Background {\\n        string name;\\n        uint256 dna;\\n    }\\n\\n    /* State variable */\\n    Background[] public s_backgrounds;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n    uint256 private constant DNADIGITS = 16;\\n    uint256 private constant DNAMODULUS = 10 ** DNADIGITS;\\n\\n    /* Factory variables */\\n    uint256 private s_recentRandomDna;\\n    BackgroundFactoryState private s_backgroundFactoryState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    /* Events */\\n    event NewBackground(uint256 backgroundId, string name, uint256 dna);\\n    event RequestedRandomDna(uint256 indexed requestId);\\n    event DnaPicked(uint256 indexed dnapicked);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_backgroundFactoryState = BackgroundFactoryState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    /* functions */\\n    // private function to create our background and emit an event\\n\\n    function createRandomBackground(string memory _name) public {\\n        if (s_backgroundFactoryState != BackgroundFactoryState.OPEN) {\\n            revert BackgroundFactory__NotOpen();\\n        }\\n        _createBackground(_name, s_recentRandomDna);\\n    }\\n\\n    function _createBackground(string memory _name, uint256 _dna) private {\\n        s_backgrounds.push(Background(_name, _dna));\\n        uint256 id = s_backgrounds.length - 1;\\n        emit NewBackground(id, _name, _dna);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink keeper nodes call\\n     * they look for the `upkeepNeeded` to return true.\\n     * The following should be true in order to return true:\\n     * 1. Our time interval should have passed\\n     * 2. Our subscription is funded with LINK\\n     * 3. The Factory should be in an \\\"open\\\" state.\\n     */\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    ) public override returns (bool upkeepNeeded, bytes memory /* performData */) {\\n        bool isOpen = (BackgroundFactoryState.OPEN == s_backgroundFactoryState);\\n        // (block.timeStamp - last block timeStamp) > interval\\n        bool timePassed = (block.timestamp - s_lastTimeStamp > i_interval);\\n        upkeepNeeded = (isOpen && timePassed);\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert BackgroundFactory__UpkeepNotNeeded(uint256(s_backgroundFactoryState));\\n        }\\n        // request the random number\\n        //Once we get it, do smth with it\\n        // 2 transaction process\\n        s_backgroundFactoryState = BackgroundFactoryState.CREATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRandomDna(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /* requestId */,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfRandomDna = randomWords[0] % DNAMODULUS;\\n        s_recentRandomDna = indexOfRandomDna;\\n        s_backgroundFactoryState = BackgroundFactoryState.OPEN;\\n        //reset our array of struct\\n        delete s_backgrounds;\\n        s_lastTimeStamp = block.timestamp;\\n        emit DnaPicked(s_recentRandomDna);\\n    }\\n\\n    /* View / Pure functions */\\n    function getRecentRandomBackground() public view returns (uint256) {\\n        return s_recentRandomDna;\\n    }\\n\\n    function getBackgroundFactoryState() public view returns (BackgroundFactoryState) {\\n        return s_backgroundFactoryState;\\n    }\\n\\n    function getNumwords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfBackgrounds() public view returns (uint256) {\\n        return s_backgrounds.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n}\\n\",\"keccak256\":\"0x005d09ac6fb75014311e6bc19d93192ffc6533f7eb2600c9bd30aee6decd4b0a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620018ca380380620018ca8339818101604052810190620000389190620001a3565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508163ffffffff166101008163ffffffff1660e01b815250506000600260006101000a81548160ff0219169083600181111562000110576200010f62000297565b5b02179055504260038190555080610120818152505050505050506200034d565b6000815190506200014181620002cb565b92915050565b6000815190506200015881620002e5565b92915050565b6000815190506200016f81620002ff565b92915050565b600081519050620001868162000319565b92915050565b6000815190506200019d8162000333565b92915050565b600080600080600060a08688031215620001c257620001c1620002c6565b5b6000620001d28882890162000130565b9550506020620001e58882890162000147565b9450506040620001f8888289016200018c565b93505060606200020b8882890162000175565b92505060806200021e888289016200015e565b9150509295509295909350565b6000620002388262000249565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002d6816200022b565b8114620002e257600080fd5b50565b620002f0816200023f565b8114620002fc57600080fd5b50565b6200030a8162000269565b81146200031657600080fd5b50565b620003248162000273565b81146200033057600080fd5b50565b6200033e8162000283565b81146200034a57600080fd5b50565b60805160601c60a05160601c60c05160e05160c01c6101005160e01c6101205161151a620003b06000396000610621015260006104d7015260006104b401526000610493015260006104570152600081816102d6015261032a015261151a6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806351c66b3f1161007157806351c66b3f1461015357806359f1b23c146101715780635f1b0fd81461018f57806369657573146101ad5780636e04ff0d146101cb578063c4df7ad5146101fc576100a9565b80630f172b28146100ae5780631fe543e3146100df578063320229eb146100fb57806336240218146101195780634585e33b14610137575b600080fd5b6100c860048036038101906100c39190610c64565b610218565b6040516100d6929190610ecb565b60405180910390f35b6100f960048036038101906100f49190610cbe565b6102d4565b005b610103610394565b6040516101109190610efb565b60405180910390f35b61012161039e565b60405161012e9190610efb565b60405180910390f35b610151600480360381019061014c9190610b85565b6103a8565b005b61015b61059f565b6040516101689190610eb0565b60405180910390f35b6101796105b6565b6040516101869190610efb565b60405180910390f35b6101976105c5565b6040516101a49190610efb565b60405180910390f35b6101b56105d2565b6040516101c29190610efb565b60405180910390f35b6101e560048036038101906101e09190610bd2565b6105de565b6040516101f3929190610e2d565b60405180910390f35b61021660048036038101906102119190610c1b565b610664565b005b6000818154811061022857600080fd5b906000526020600020906002020160009150905080600001805461024b906112cf565b80601f0160208091040260200160405190810160405280929190818152602001828054610277906112cf565b80156102c45780601f10610299576101008083540402835291602001916102c4565b820191906000526020600020905b8154815290600101906020018083116102a757829003601f168201915b5050505050908060010154905082565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161037d929190610e04565b60405180910390fd5b61039082826106e0565b5050565b6000600354905090565b6000600154905090565b60006103c2604051806020016040528060008152506105de565b5090508061042857600260009054906101000a900460ff1660018111156103ec576103eb6113c1565b5b6040517f436ba0a300000000000000000000000000000000000000000000000000000000815260040161041f9190610efb565b60405180910390fd5b6001600260006101000a81548160ff0219169083600181111561044e5761044d6113c1565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610518959493929190610e5d565b602060405180830381600087803b15801561053257600080fd5b505af1158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190610c91565b9050807f6957bae45d413eb91a986483fd556679f4d7b69c127f0f204a66df9f4533539860405160405180910390a250505050565b6000600260009054906101000a900460ff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b60008080549050905090565b600060606000600260009054906101000a900460ff166001811115610606576106056113c1565b5b6000600181111561061a576106196113c1565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006003544261064e91906111b0565b11905081801561065b5750805b93505050915091565b60006001811115610678576106776113c1565b5b600260009054906101000a900460ff16600181111561069a576106996113c1565b5b146106d1576040517f2eb8a13900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106dd81600154610792565b50565b60006010600a6106f09190611092565b826000815181106107045761070361141f565b5b60200260200101516107169190611332565b9050806001819055506000600260006101000a81548160ff02191690836001811115610745576107446113c1565b5b02179055506000806107579190610851565b426003819055506001547fa1ab8376f1638500645ddbbc03cf5feab3a2e45ad3a6adcc0216dee94201af8460405160405180910390a2505050565b6000604051806040016040528084815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190805190602001906107ee929190610875565b506020820151816001015550506000600160008054905061080f91906111b0565b90507fbf3206d101e1b4d760ebe40e247bda1b71c5af30efe69bf9235831706faaef7c81848460405161084493929190610f16565b60405180910390a1505050565b508054600082556002029060005260206000209081019061087291906108fb565b50565b828054610881906112cf565b90600052602060002090601f0160209004810192826108a357600085556108ea565b82601f106108bc57805160ff19168380011785556108ea565b828001600101855582156108ea579182015b828111156108e95782518255916020019190600101906108ce565b5b5090506108f7919061092a565b5090565b5b8082111561092657600080820160006109159190610947565b6001820160009055506002016108fc565b5090565b5b8082111561094357600081600090555060010161092b565b5090565b508054610953906112cf565b6000825580601f106109655750610984565b601f016020900490600052602060002090810190610983919061092a565b5b50565b600061099a61099584610f79565b610f54565b905080838252602082019050828560208602820111156109bd576109bc611487565b5b60005b858110156109ed57816109d38882610b5b565b8452602084019350602083019250506001810190506109c0565b5050509392505050565b6000610a0a610a0584610fa5565b610f54565b905082815260208101848484011115610a2657610a2561148c565b5b610a3184828561128d565b509392505050565b6000610a4c610a4784610fd6565b610f54565b905082815260208101848484011115610a6857610a6761148c565b5b610a7384828561128d565b509392505050565b600082601f830112610a9057610a8f611482565b5b8135610aa0848260208601610987565b91505092915050565b60008083601f840112610abf57610abe611482565b5b8235905067ffffffffffffffff811115610adc57610adb61147d565b5b602083019150836001820283011115610af857610af7611487565b5b9250929050565b600082601f830112610b1457610b13611482565b5b8135610b248482602086016109f7565b91505092915050565b600082601f830112610b4257610b41611482565b5b8135610b52848260208601610a39565b91505092915050565b600081359050610b6a816114cd565b92915050565b600081519050610b7f816114cd565b92915050565b60008060208385031215610b9c57610b9b611496565b5b600083013567ffffffffffffffff811115610bba57610bb9611491565b5b610bc685828601610aa9565b92509250509250929050565b600060208284031215610be857610be7611496565b5b600082013567ffffffffffffffff811115610c0657610c05611491565b5b610c1284828501610aff565b91505092915050565b600060208284031215610c3157610c30611496565b5b600082013567ffffffffffffffff811115610c4f57610c4e611491565b5b610c5b84828501610b2d565b91505092915050565b600060208284031215610c7a57610c79611496565b5b6000610c8884828501610b5b565b91505092915050565b600060208284031215610ca757610ca6611496565b5b6000610cb584828501610b70565b91505092915050565b60008060408385031215610cd557610cd4611496565b5b6000610ce385828601610b5b565b925050602083013567ffffffffffffffff811115610d0457610d03611491565b5b610d1085828601610a7b565b9150509250929050565b610d23816111e4565b82525050565b610d32816111f6565b82525050565b610d4181611202565b82525050565b6000610d5282611007565b610d5c818561101d565b9350610d6c81856020860161129c565b610d758161149b565b840191505092915050565b610d898161127b565b82525050565b6000610d9a82611012565b610da4818561102e565b9350610db481856020860161129c565b610dbd8161149b565b840191505092915050565b610dd18161121f565b82525050565b610de08161124d565b82525050565b610def81611257565b82525050565b610dfe81611267565b82525050565b6000604082019050610e196000830185610d1a565b610e266020830184610d1a565b9392505050565b6000604082019050610e426000830185610d29565b8181036020830152610e548184610d47565b90509392505050565b600060a082019050610e726000830188610d38565b610e7f6020830187610df5565b610e8c6040830186610dc8565b610e996060830185610de6565b610ea66080830184610de6565b9695505050505050565b6000602082019050610ec56000830184610d80565b92915050565b60006040820190508181036000830152610ee58185610d8f565b9050610ef46020830184610dd7565b9392505050565b6000602082019050610f106000830184610dd7565b92915050565b6000606082019050610f2b6000830186610dd7565b8181036020830152610f3d8185610d8f565b9050610f4c6040830184610dd7565b949350505050565b6000610f5e610f6f565b9050610f6a8282611301565b919050565b6000604051905090565b600067ffffffffffffffff821115610f9457610f9361144e565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610fc057610fbf61144e565b5b610fc98261149b565b9050602081019050919050565b600067ffffffffffffffff821115610ff157610ff061144e565b5b610ffa8261149b565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000808291508390505b60018511156110895780860481111561106557611064611363565b5b60018516156110745780820291505b8081029050611082856114ac565b9450611049565b94509492505050565b600061109d8261124d565b91506110a88361124d565b92506110d57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846110dd565b905092915050565b6000826110ed57600190506111a9565b816110fb57600090506111a9565b8160018114611111576002811461111b5761114a565b60019150506111a9565b60ff84111561112d5761112c611363565b5b8360020a91508482111561114457611143611363565b5b506111a9565b5060208310610133831016604e8410600b841016171561117f5782820a90508381111561117a57611179611363565b5b6111a9565b61118c848484600161103f565b925090508184048111156111a3576111a2611363565b5b81810290505b9392505050565b60006111bb8261124d565b91506111c68361124d565b9250828210156111d9576111d8611363565b5b828203905092915050565b60006111ef8261122d565b9050919050565b60008115159050919050565b6000819050919050565b600081905061121a826114b9565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006112868261120c565b9050919050565b82818337600083830152505050565b60005b838110156112ba57808201518184015260208101905061129f565b838111156112c9576000848401525b50505050565b600060028204905060018216806112e757607f821691505b602082108114156112fb576112fa6113f0565b5b50919050565b61130a8261149b565b810181811067ffffffffffffffff821117156113295761132861144e565b5b80604052505050565b600061133d8261124d565b91506113488361124d565b92508261135857611357611392565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b600281106114ca576114c96113c1565b5b50565b6114d68161124d565b81146114e157600080fd5b5056fea2646970667358221220f2fee7a0112cc13b11d3bb8bcaa7df18eec35c6104e15d56c681b3a1cba578fd64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink keeper nodes call they look for the `upkeepNeeded` to return true. The following should be true in order to return true: 1. Our time interval should have passed 2. Our subscription is funded with LINK 3. The Factory should be in an \"open\" state."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 199,
        "contract": "contracts/test/BackgroundFactory.sol:BackgroundFactory",
        "label": "s_backgrounds",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Background)195_storage)dyn_storage"
      },
      {
        "astId": 224,
        "contract": "contracts/test/BackgroundFactory.sol:BackgroundFactory",
        "label": "s_recentRandomDna",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 227,
        "contract": "contracts/test/BackgroundFactory.sol:BackgroundFactory",
        "label": "s_backgroundFactoryState",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(BackgroundFactoryState)190"
      },
      {
        "astId": 229,
        "contract": "contracts/test/BackgroundFactory.sol:BackgroundFactory",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_struct(Background)195_storage)dyn_storage": {
        "base": "t_struct(Background)195_storage",
        "encoding": "dynamic_array",
        "label": "struct BackgroundFactory.Background[]",
        "numberOfBytes": "32"
      },
      "t_enum(BackgroundFactoryState)190": {
        "encoding": "inplace",
        "label": "enum BackgroundFactory.BackgroundFactoryState",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Background)195_storage": {
        "encoding": "inplace",
        "label": "struct BackgroundFactory.Background",
        "members": [
          {
            "astId": 192,
            "contract": "contracts/test/BackgroundFactory.sol:BackgroundFactory",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 194,
            "contract": "contracts/test/BackgroundFactory.sol:BackgroundFactory",
            "label": "dna",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}